[user]
	name = Paul Unger
	email = g.paul.u@gmail.com
[push]
	default = simple
[color]
	ui = auto
	interactive = auto
[alias]
	s = status
	cm = commit -m
	cam = commit -am
	l = log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'
	ll = log --stat --abbrev-commit
	d = diff --color-words
	dh = diff --color-words head
	alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
	pullr = pull --rebase
	co = checkout
	mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -
	ffwd = !sh -c 'git checkout --quiet HEAD && git fetch origin $1:$1 && git checkout --quiet' -
	# Cleanup a Git repository by removing dangling objects, deleted branches, and by compressing file revisions. Specific cleanup operations are describe below:
	# * remote prune - Delete stale tracking branches that have already been removed from `origin` but are still available locally in `remotes/origin`.
	# * branch --merged - Remove all local, and remote, branches that have been successfully merged into the current checked out local branch.
	# * git fetch --prune - Delete tags (refs/tags) that have already been removed from `origin` (+refs/tags/*) but are still available locally (:refs/tags/*).
	# If the name of a remote is not provided to the alias the command will default to the `origin` remote. If you rely on the default behavior, but the local working directory does not have a `origin` remote, this command will fail.
	cleanup = "!sh -c 'git remote prune origin && git branch --merged | grep -v \"*\" | grep -v master | xargs -n 1 -I _branch sh -c \"git branch -D _branch; git push ${1:-origin} :refs/heads/_branch;\" && git fetch --prune ${1:-origin} \"+refs/tags/*:refs/tags/*\"'"
	# Cleanup a Git repository by removing dangling objects, deleted branches, and by compressing file revisions. Specific cleanup operations are describe below:
	# * remote prune - Delete stale tracking branches that have already been removed from `origin` but are still available locally in `remotes/origin`.
	# * stash clear - Clear the stash, deleting any stashed changes for this repository.
	# * clean -X - Remove all files ignored by Git through the use of Git's `.gitignore` file. Useful for cleaning out build artifacts.
	# * gc - Compress file revisions (which will reduce disk space consumption and improve performance), and remove unreachable objects. The `--aggressive` option is used to instruct Git to be more aggressive in cleaning, at the expense of more time.
	# * branch --merged - Remove all local, and remote, branches that have been successfully merged into the current checked out local branch.
	# * git fetch --prune - Delete tags (refs/tags) that have already been removed from `origin` (+refs/tags/*) but are still available locally (:refs/tags/*).
	# If the name of a remote is not provided to the alias the command will default to the `origin` remote. If you rely on the default behavior, but the local working directory does not have a `origin` remote, this command will fail.
	full-cleanup = "!sh -c 'git remote prune origin && git stash clear && git clean -Xdf && git gc --aggressive && git branch --merged | grep -v \"*\" | grep -v master | xargs -n 1 -I _branch sh -c \"git branch -D _branch; git push ${1:-origin} :refs/heads/_branch;\" && git fetch --prune ${1:-origin} \"+refs/tags/*:refs/tags/*\"'"
	# List all aliases stored in the user's Git configuration file. In addition to the aliases, display their values.
	aliases = "!git config -l | grep alias | cut -c 7-"
	pullff = pull --ff-only
	clonewin = clone --config core.autocrlf=true

[core]
	excludesfile = ~/.gitignore_global
[fetch]
	prune = true
[include]
	path = .gitconfig.local
